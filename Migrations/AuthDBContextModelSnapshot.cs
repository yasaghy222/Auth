// <auto-generated />
using System;
using Auth.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Auth.Migrations
{
    [DbContext(typeof(AuthDBContext))]
    partial class AuthDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Auth.Domain.Entities.Organization", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ParentId")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 557, DateTimeKind.Utc).AddTicks(8762),
                            Status = (byte)1,
                            Title = "Auth.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 139, 32, 123, 205, 111, 137, 86, 72, 123, 76, 224, 81, 14 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 557, DateTimeKind.Utc).AddTicks(8779),
                            ParentId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            Status = (byte)1,
                            Title = "Accounting.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 139, 183, 77, 220, 76, 77, 22, 99, 90, 112, 204, 45, 8 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 557, DateTimeKind.Utc).AddTicks(8783),
                            ParentId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            Status = (byte)1,
                            Title = "RedSense.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 53, 249, 102, 223, 110, 72, 121, 238, 195, 21, 7, 23, 232 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 557, DateTimeKind.Utc).AddTicks(8786),
                            ParentId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            Status = (byte)1,
                            Title = "RedGuard.Update.Service"
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.Permission", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ResourceId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 204, 150, 84, 240, 42, 228, 210, 77, 104, 4, 133, 180, 25, 184 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9234),
                            ResourceId = new byte[] { 1, 145, 203, 214, 139, 112, 40, 246, 89, 83, 179, 208, 14, 133, 229, 148 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 204, 150, 107, 127, 150, 207, 20, 119, 52, 110, 7, 61, 68, 202 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9243),
                            ResourceId = new byte[] { 1, 145, 204, 104, 59, 239, 89, 149, 197, 113, 106, 71, 146, 116, 105, 173 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 208, 13, 36, 216, 81, 194, 36, 35, 85, 25, 108, 59, 73, 83 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9246),
                            ResourceId = new byte[] { 1, 145, 194, 19, 100, 213, 195, 167, 224, 76, 129, 159, 122, 140, 74, 9 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 208, 13, 243, 255, 43, 0, 161, 232, 166, 128, 90, 226, 38, 133 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9249),
                            ResourceId = new byte[] { 1, 145, 204, 124, 54, 99, 52, 242, 64, 198, 0, 248, 113, 159, 236, 46 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 208, 14, 63, 53, 205, 210, 151, 168, 232, 220, 223, 155, 152, 77 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9252),
                            ResourceId = new byte[] { 1, 145, 194, 46, 218, 213, 189, 253, 172, 150, 128, 62, 74, 166, 112, 183 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 176, 126, 122, 203, 118, 66, 117, 103, 189, 43, 158, 160, 222 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9256),
                            ResourceId = new byte[] { 1, 145, 214, 176, 204, 85, 137, 149, 161, 112, 84, 190, 254, 162, 47, 32 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 170, 115, 211, 50, 48, 38, 38, 57, 82, 44, 32, 56, 80 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9259),
                            ResourceId = new byte[] { 1, 145, 214, 171, 56, 8, 104, 114, 75, 43, 244, 80, 64, 185, 70, 168 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 170, 132, 231, 9, 175, 156, 183, 58, 100, 14, 45, 125, 45 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9262),
                            ResourceId = new byte[] { 1, 145, 214, 171, 75, 18, 105, 188, 45, 78, 63, 255, 179, 32, 94, 10 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 170, 150, 60, 90, 64, 108, 63, 128, 120, 86, 131, 246, 81 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9264),
                            ResourceId = new byte[] { 1, 145, 214, 171, 101, 41, 92, 86, 224, 46, 203, 24, 33, 17, 49, 104 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 170, 170, 175, 250, 134, 135, 121, 252, 210, 91, 70, 221, 66 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(9267),
                            ResourceId = new byte[] { 1, 145, 214, 171, 132, 43, 47, 250, 217, 165, 234, 153, 82, 63, 96, 126 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 }
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.Resource", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("GroupId")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<bool>("RequirePermission")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 203, 214, 139, 112, 40, 246, 89, 83, 179, 208, 14, 133, 229, 148 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7887),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = false,
                            Method = "POST",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.User.Create",
                            Url = "/user"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 204, 104, 59, 239, 89, 149, 197, 113, 106, 71, 146, 116, 105, 173 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7906),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = false,
                            Method = "PUT",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.User.Create",
                            Url = "/user"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 194, 19, 100, 213, 195, 167, 224, 76, 129, 159, 122, 140, 74, 9 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7913),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = false,
                            Method = "DELETE",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.User.Delete",
                            Url = "/user"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 204, 113, 69, 43, 84, 249, 125, 55, 60, 132, 175, 127, 19, 107 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7917),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = false,
                            Method = "PATCH",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.User.ChangePassword",
                            Url = "/user/change-password"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 204, 121, 186, 100, 163, 46, 156, 160, 49, 160, 100, 99, 222, 204 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7921),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = true,
                            Method = "PATCH",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = false,
                            Title = "Auth.User.ResetPassword",
                            Url = "/user/reset-password"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 204, 124, 54, 99, 52, 242, 64, 198, 0, 248, 113, 159, 236, 46 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7924),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = false,
                            Method = "GET",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.User.Get.Id",
                            Url = "/user/{id}"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 194, 46, 218, 213, 189, 253, 172, 150, 128, 62, 74, 166, 112, 183 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7929),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = false,
                            Method = "GET",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.User.List.Filter",
                            Url = "/user/list/filter"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 208, 27, 199, 238, 30, 19, 80, 232, 161, 201, 236, 48, 39, 95 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7932),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = false,
                            Method = "PUT",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = false,
                            Title = "Auth.User.Update.Profile",
                            Url = "/user/profile"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 204, 125, 253, 118, 135, 100, 148, 172, 21, 53, 133, 140, 225, 216 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7936),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = false,
                            Method = "GET",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = false,
                            Title = "Auth.User.Get.Profile",
                            Url = "/user/profile"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 209, 139, 180, 41, 120, 35, 55, 253, 6, 185, 177, 78, 191, 21 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7940),
                            GroupId = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            IsPublic = true,
                            Method = "POST",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = false,
                            Title = "Auth.User.Login",
                            Url = "/user/login"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 176, 204, 85, 137, 149, 161, 112, 84, 190, 254, 162, 47, 32 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7943),
                            GroupId = new byte[] { 1, 145, 208, 31, 165, 2, 171, 227, 176, 45, 84, 44, 249, 118, 7, 186 },
                            IsPublic = false,
                            Method = "POST",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.Organization.Create",
                            Url = "/organization"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 171, 56, 8, 104, 114, 75, 43, 244, 80, 64, 185, 70, 168 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7949),
                            GroupId = new byte[] { 1, 145, 208, 31, 165, 2, 171, 227, 176, 45, 84, 44, 249, 118, 7, 186 },
                            IsPublic = false,
                            Method = "PUT",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.Organization.Create",
                            Url = "/organization"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 171, 75, 18, 105, 188, 45, 78, 63, 255, 179, 32, 94, 10 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7952),
                            GroupId = new byte[] { 1, 145, 208, 31, 165, 2, 171, 227, 176, 45, 84, 44, 249, 118, 7, 186 },
                            IsPublic = false,
                            Method = "DELETE",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.Organization.Delete",
                            Url = "/organization"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 171, 101, 41, 92, 86, 224, 46, 203, 24, 33, 17, 49, 104 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7956),
                            GroupId = new byte[] { 1, 145, 208, 31, 165, 2, 171, 227, 176, 45, 84, 44, 249, 118, 7, 186 },
                            IsPublic = false,
                            Method = "GET",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.Organization.Get.Id",
                            Url = "/organization/{id}"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 214, 171, 132, 43, 47, 250, 217, 165, 234, 153, 82, 63, 96, 126 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(7960),
                            GroupId = new byte[] { 1, 145, 208, 31, 165, 2, 171, 227, 176, 45, 84, 44, 249, 118, 7, 186 },
                            IsPublic = false,
                            Method = "GET",
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RequirePermission = true,
                            Title = "Auth.Organization.List.Filter",
                            Url = "/organization/list/filter"
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.ResourceGroup", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<byte[]>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("ParentId")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.ToTable("ResourceGroups");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 194, 42, 195, 53, 198, 72, 83, 119, 87, 191, 13, 30, 74, 191 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(6120),
                            Order = 1,
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            Title = "Auth.User"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 208, 31, 165, 2, 171, 227, 176, 45, 84, 44, 249, 118, 7, 186 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(6130),
                            Order = 2,
                            OrganizationId = new byte[] { 1, 145, 106, 139, 32, 123, 205, 111, 137, 86, 72, 123, 76, 224, 81, 14 },
                            Title = "Auth.Organization"
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.Role", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 557, DateTimeKind.Utc).AddTicks(9786),
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            Status = (byte)1,
                            Title = "Admin.Auth.Service"
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime?>("AccountLockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsEmailValid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneValid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 104, 183, 60, 4, 137, 1, 231, 28, 132, 171, 255, 73, 237 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 558, DateTimeKind.Utc).AddTicks(466),
                            FailedLoginAttempts = 0,
                            Family = "",
                            IsEmailValid = false,
                            IsPhoneValid = false,
                            Name = "Admin.Auth.Service",
                            Password = "37JLFzB1iLS0sZ7H6J54EuGBmTa6N4TMG73jc6IfziHmobGjMgmebOcpwVl6FNA0",
                            Status = (byte)1,
                            Username = "AdminAuthService1"
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.UserOrganization", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 124, 211, 13, 172, 121, 123, 233, 248, 119, 101, 211, 216, 0 },
                            CreateAt = new DateTime(2024, 9, 9, 12, 41, 55, 606, DateTimeKind.Utc).AddTicks(4896),
                            OrganizationId = new byte[] { 1, 145, 106, 139, 32, 123, 205, 111, 137, 86, 72, 123, 76, 224, 81, 14 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 },
                            UserId = new byte[] { 1, 145, 110, 104, 183, 60, 4, 137, 1, 231, 28, 132, 171, 255, 73, 237 }
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.Organization", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Organization", "Parent")
                        .WithMany("Chides")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Permission", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Resource", "Resource")
                        .WithMany("Permissions")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.Domain.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Resource", b =>
                {
                    b.HasOne("Auth.Domain.Entities.ResourceGroup", "Group")
                        .WithMany("Resources")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Auth.Domain.Entities.Organization", "Organization")
                        .WithMany("Resources")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Auth.Domain.Entities.ResourceGroup", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.Domain.Entities.ResourceGroup", "Parent")
                        .WithMany("Chields")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Organization");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Role", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Organization", "Organization")
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Auth.Domain.Entities.UserOrganization", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.Domain.Entities.Role", "Role")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Auth.Domain.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Chides");

                    b.Navigation("Resources");

                    b.Navigation("Roles");

                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Auth.Domain.Entities.ResourceGroup", b =>
                {
                    b.Navigation("Chields");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("Auth.Domain.Entities.User", b =>
                {
                    b.Navigation("UserOrganizations");
                });
#pragma warning restore 612, 618
        }
    }
}
