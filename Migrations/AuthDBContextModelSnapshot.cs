// <auto-generated />
using System;
using Auth.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Auth.Migrations
{
    [DbContext(typeof(AuthDBContext))]
    partial class AuthDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Auth.Domain.Entities.Organization", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ParentId")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(7899),
                            Status = (byte)1,
                            Title = "Auth.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 139, 32, 123, 205, 111, 137, 86, 72, 123, 76, 224, 81, 14 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(7915),
                            Status = (byte)1,
                            Title = "Accounting.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 139, 183, 77, 220, 76, 77, 22, 99, 90, 112, 204, 45, 8 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(7918),
                            Status = (byte)1,
                            Title = "RedSense.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 177, 249, 102, 223, 64, 72, 121, 238, 195, 21, 7, 23, 232 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(7920),
                            Status = (byte)1,
                            Title = "RedGuard.Update.Service"
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.Permission", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ResourceId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Resource", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("GroupId")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Auth.Domain.Entities.ResourceGroup", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<byte[]>("ParentId")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ResourceGroups");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Role", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(9121),
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            Status = (byte)1,
                            Title = "Admin.Auth.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 170, 223, 167, 73, 180, 1, 51, 77, 185, 122, 95, 78, 244 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(9127),
                            OrganizationId = new byte[] { 1, 145, 106, 139, 32, 123, 205, 111, 137, 86, 72, 123, 76, 224, 81, 14 },
                            Status = (byte)1,
                            Title = "Admin.Accounting.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 106, 174, 81, 141, 200, 228, 8, 62, 170, 241, 222, 2, 170, 69 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(9130),
                            OrganizationId = new byte[] { 1, 145, 106, 139, 183, 77, 220, 76, 77, 22, 99, 90, 112, 204, 45, 8 },
                            Status = (byte)1,
                            Title = "Admin.RedSense.Service"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 132, 36, 254, 143, 28, 34, 174, 239, 146, 132, 223, 29, 241 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(9133),
                            OrganizationId = new byte[] { 1, 145, 106, 177, 249, 102, 223, 64, 72, 121, 238, 195, 21, 7, 23, 232 },
                            Status = (byte)1,
                            Title = "Admin.RedGuard.Update.Service"
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.Session", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte>("Platform")
                        .HasColumnType("tinyint");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Auth.Domain.Entities.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime?>("AccountLockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 104, 183, 60, 4, 137, 1, 231, 28, 132, 171, 255, 73, 237 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 598, DateTimeKind.Utc).AddTicks(9730),
                            FailedLoginAttempts = 0,
                            Family = "Auth.Service",
                            Name = "Admin",
                            Password = "Uni7eNoTnfa874XWsjxYwwlotZuACI18GGHPakRNtM3U2UUyuGRAu4KRbv6kbYg6",
                            Status = (byte)1,
                            Username = "AdminAuthService1"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 105, 87, 195, 45, 141, 160, 102, 109, 140, 134, 105, 139, 173 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 600, DateTimeKind.Utc).AddTicks(7073),
                            FailedLoginAttempts = 0,
                            Family = "Accounting.Service",
                            Name = "Admin",
                            Password = "7/ggbvDnBI05RZ/fsj5CE5Mw4xrIWHN1shXVf0iQosbBtFLa2eSZ/dtOt1tPA31P",
                            Status = (byte)1,
                            Username = "AdminAccountingService1"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 130, 27, 139, 16, 168, 64, 233, 212, 85, 188, 139, 27, 111 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 602, DateTimeKind.Utc).AddTicks(3811),
                            FailedLoginAttempts = 0,
                            Family = "RedSense.Service",
                            Name = "Admin",
                            Password = "9HguKa4iTkmFh++/yUxzjQbmCwlEObAhw4aRCVTPOWEV5kKEQElHfaWXxjj6kJOA",
                            Status = (byte)1,
                            Username = "AdminRedSenseService1"
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 131, 42, 217, 160, 182, 83, 128, 106, 136, 170, 11, 183, 126 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 604, DateTimeKind.Utc).AddTicks(391),
                            FailedLoginAttempts = 0,
                            Family = "RedGuard.Update.Service",
                            Name = "Admin",
                            Password = "MUV359Nc5cWjv54Z7lPLjaLolct1Y1FwISmwfGT7HdI6dHoq5VKeu1n//7+1K42I",
                            Status = (byte)1,
                            Username = "AdminRedGuardUpdateService1"
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.UserOrganization", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 124, 211, 13, 172, 121, 123, 233, 248, 119, 101, 211, 216, 0 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 606, DateTimeKind.Utc).AddTicks(753),
                            OrganizationId = new byte[] { 1, 145, 106, 136, 242, 8, 4, 73, 225, 232, 220, 197, 197, 104, 46, 232 },
                            RoleId = new byte[] { 1, 145, 106, 169, 155, 50, 131, 103, 80, 86, 64, 7, 186, 122, 115, 182 },
                            UserId = new byte[] { 1, 145, 110, 104, 183, 60, 4, 137, 1, 231, 28, 132, 171, 255, 73, 237 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 127, 99, 205, 140, 184, 243, 37, 41, 73, 148, 104, 34, 45 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 606, DateTimeKind.Utc).AddTicks(762),
                            OrganizationId = new byte[] { 1, 145, 106, 139, 32, 123, 205, 111, 137, 86, 72, 123, 76, 224, 81, 14 },
                            RoleId = new byte[] { 1, 145, 106, 170, 223, 167, 73, 180, 1, 51, 77, 185, 122, 95, 78, 244 },
                            UserId = new byte[] { 1, 145, 110, 105, 87, 195, 45, 141, 160, 102, 109, 140, 134, 105, 139, 173 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 129, 40, 16, 107, 5, 179, 118, 154, 72, 139, 107, 194, 33 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 606, DateTimeKind.Utc).AddTicks(766),
                            OrganizationId = new byte[] { 1, 145, 106, 139, 183, 77, 220, 76, 77, 22, 99, 90, 112, 204, 45, 8 },
                            RoleId = new byte[] { 1, 145, 106, 174, 81, 141, 200, 228, 8, 62, 170, 241, 222, 2, 170, 69 },
                            UserId = new byte[] { 1, 145, 110, 130, 27, 139, 16, 168, 64, 233, 212, 85, 188, 139, 27, 111 }
                        },
                        new
                        {
                            Id = new byte[] { 1, 145, 110, 130, 62, 238, 186, 7, 87, 156, 228, 222, 14, 191, 114, 169 },
                            CreateAt = new DateTime(2024, 8, 20, 13, 35, 50, 606, DateTimeKind.Utc).AddTicks(770),
                            OrganizationId = new byte[] { 1, 145, 106, 177, 249, 102, 223, 64, 72, 121, 238, 195, 21, 7, 23, 232 },
                            RoleId = new byte[] { 1, 145, 110, 132, 36, 254, 143, 28, 34, 174, 239, 146, 132, 223, 29, 241 },
                            UserId = new byte[] { 1, 145, 110, 131, 42, 217, 160, 182, 83, 128, 106, 136, 170, 11, 183, 126 }
                        });
                });

            modelBuilder.Entity("Auth.Domain.Entities.Organization", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Organization", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Permission", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Resource", "Resource")
                        .WithMany("Permissions")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.Domain.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Resource", b =>
                {
                    b.HasOne("Auth.Domain.Entities.ResourceGroup", "Group")
                        .WithMany("Resources")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Auth.Domain.Entities.Organization", "Organization")
                        .WithMany("Resources")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Auth.Domain.Entities.ResourceGroup", b =>
                {
                    b.HasOne("Auth.Domain.Entities.ResourceGroup", "Parent")
                        .WithMany("Chields")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Role", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Organization", "Organization")
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Session", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.Domain.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Auth.Domain.Entities.UserOrganization", b =>
                {
                    b.HasOne("Auth.Domain.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.Domain.Entities.Role", "Role")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Auth.Domain.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("Roles");

                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Auth.Domain.Entities.ResourceGroup", b =>
                {
                    b.Navigation("Chields");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Auth.Domain.Entities.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("Auth.Domain.Entities.User", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("UserOrganizations");
                });
#pragma warning restore 612, 618
        }
    }
}
